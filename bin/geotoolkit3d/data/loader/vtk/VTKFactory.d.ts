import {Material, Vector3, Object3D, Mesh, Line, Color} from '../../../THREE';
import {ColorProvider} from '../../../../geotoolkit/util/ColorProvider';
import {PointCloud} from '../../../scene/pointset/PointCloud';

/**
 * This class can parse vtk files and return a comprehensive json object.<br>
 * <br>
 * This object can be used to generate Geometries and Object3D.<br>
 * <br>
 * Note that, for now, only ASCII format is supported
 */
export class VTKFactory {
    /**
     * This class can parse vtk files and return a comprehensive json object.<br>
     * <br>
     * This object can be used to generate Geometries and Object3D.<br>
     * <br>
     * Note that, for now, only ASCII format is supported
     */
    constructor();
    /**
     * Creates objects 3D from the given JSON (generated by parsing a VTK dataset).<br>
     * <br>
     * Note, that this factory will automatically apply a recenter and a rotation (to apply Z = UP paradigm) on the given vertices.<br>
     * @param json The input json object
     * @param json.data The actual data
     * @param json.data.position The vertices (XYZ)
     * @param json.data.fielddata The fielddata object if any is present
     * @param json.data.fielddata.name The fielddata name
     * @param json.data.fielddata.type The fielddata type
     * @param json.data.fielddata.arrays The fielddata content
     * @param json.data.fielddata.arrays0 An example of the elements in arrays
     * @param json.data.fielddata.arrays0.name The name of this fielddata
     * @param json.data.fielddata.arrays0.stride The stride of this fielddata
     * @param json.data.fielddata.arrays0.values The values of this fielddata
     * @param json.data.index The indices for meshes (if any)
     * @param json.data.lineindex The indices for lines (if any)
     * @param json.data.pointindex The indices for pointset/pointcloud (if any)
     * @param json.data.cells The cells information, this is an intermediate representation, might not be necessary to create 3D objects
     * @param options The options to use to customize resulting objects
     * @param options.mesh The options to use to customize resulting mesh
     * @param options.mesh.material The material to customize resulting mesh
     * @param options.mesh.position The mesh position
     * @param options.mesh.scale The mesh scale
     * @param options.mesh.rotation The mesh rotation
     * @param options.line The options to use to customize resulting line
     * @param options.line.material The material to customize resulting line
     * @param options.line.position The line position
     * @param options.line.scale The line scale
     * @param options.line.rotation The line rotation
     */
    create(json: object | { data: object | { position?: number[]; fielddata?: object | { name?: object; type?: object; arrays?: object[]; arrays0?: object | { name?: string; stride?: number; values?: number[]; } ; } ; index?: number[]; lineindex?: number[][]; pointindex?: number[]; cells?: number[]; } ; } , options: object | { mesh?: object | { material: Material; position?: Vector3; scale?: Vector3; rotation?: Vector3; } ; line?: object | { material: Material; position?: Vector3; scale?: Vector3; rotation?: Vector3; } ; } ): Object3D[];
    /**
     * Creates a mesh from the given JSON (generated by parsing a VTK dataset).
     * @param json The input json object
     * @param json.data The actual data
     * @param json.data.position The vertices (XYZ)
     * @param json.data.index The indices for meshes
     * @param options The options to use to customize resulting objects
     * @param options.mesh The options to use to customize resulting mesh
     * @param options.mesh.material The material to customize resulting mesh
     * @param options.mesh.position The mesh position
     * @param options.mesh.scale The mesh scale
     * @param options.mesh.rotation The mesh rotation
     */
    createMesh(json: object | { data: object | { position: number[]; index: number[]; } ; } , options: object | { mesh?: object | { material?: Material; position?: Vector3; scale?: Vector3; rotation?: Vector3; } ; } ): Mesh;
    /**
     * Creates lines from the given JSON (generated by parsing a VTK dataset).
     * @param json The input json object
     * @param json.data The actual data
     * @param json.data.position The vertices (XYZ)
     * @param json.data.lineindex The indices for the lines
     * @param options The options to use to customize resulting objects
     * @param options.line The options to use to customize resulting line
     * @param options.line.material The material to customize resulting line
     * @param options.line.position The line position
     * @param options.line.scale The line scale
     * @param options.line.rotation The line rotation
     */
    createLines(json: object | { data: object | { position: number[]; lineindex: number[][]; } ; } , options: object | { line?: object | { material?: Material; position?: Vector3; scale?: Vector3; rotation?: Vector3; } ; } ): Line[];
    /**
     * Creates a pointcloud from the given JSON (generated by parsing a VTK dataset).<br>
     * <br>
     * One can choose what attribute will be used for point size and point color based on their names.<br>
     * Note that only 'scalar' attributes and FieldData with a stride of 1 can be used.<br>
     * @param json The input json object
     * @param json.data The actual data
     * @param json.data.position The vertices (XYZ)
     * @param json.data.pointindex The indices for points, if null all vertices will be used
     * @param options The options to use to customize resulting objects
     * @param options.scale scale for every resulting object
     * @param options.pointcloud The options to use to customize resulting pointcloud
     * @param options.pointcloud.attributes The names of the attribute to use.
     * @param options.pointcloud.attributes.sizes The key for the size attribute
     * @param options.pointcloud.attributes.value The key for the value attribute
     * @param options.pointcloud.colorprovider A color provider or a single color in css format
     * @param options.mesh deprecated (since 2020 (3.0)). The pointcloud options
     * @param options.mesh.position deprecated (since 2020 (3.0)). The pointcloud position
     * @param options.mesh.scale deprecated (since 2020 (3.0)). The pointcloud scale
     * @param options.mesh.rotation deprecated (since 2020 (3.0)). The pointcloud rotation
     */
    createPointcloud(json: object | { data: object | { position: number[]; pointindex?: number[]; } ; } , options: object | { scale?: Vector3; pointcloud?: object | { attributes?: object | { sizes?: string; value?: string; } ; colorprovider?: ColorProvider | string | Color; } ; mesh?: object | { position?: Vector3; scale?: Vector3; rotation?: Vector3; } ; } ): PointCloud;
}
